#ifndef __kvbufrd_h__
#define __kvbufrd_h__

#include "KeyVal.idl"
#include "admin.idl"

module kvbufrd{

  struct BufrData{
    long     stationid;
    string   termin;
    boolean  isOk;
    string   message;
    string   bufr;
  };

  struct DelayElement{
    long   wmono;
    long   id;
    string obstime;
    string delay;
  };

  typedef sequence<DelayElement> DelayList;

  typedef sequence<long> LongList;

  struct ReloadElement{
    short wmono;
    short id;
    short eventsWaiting;
  };
  
  typedef sequence<ReloadElement> ReloadList;

  struct StationInfo{
    short    wmono;
    long     id;
    LongList stationIDList;
    string   info;
  };
  
  typedef sequence<StationInfo> StationInfoList;
  
  interface bufrcb{
    void bufr(in BufrData data); 
  };

  typedef sequence<short> WmoNoList;

  struct BufrElement{
    short  wmono;
    string obstime;
    string createtime;
    short  ccx;
    string wmomsg;
  };

  typedef sequence<BufrElement> BufrList;

  struct DataElement{
    long stationid;
    string obstime;
    string original;
    short  paramid;
    short  typeid_;
    short  sensor;
    short  level;
  };
  
  typedef sequence<DataElement> DataElementList;
  
  
  interface bufr : micutil::Admin{
    boolean createBufr(in short  wmono, 
			in string obstime,
			in micutil::KeyValList keyVals,
			in bufrcb callback);
    
    boolean stations(out StationInfoList infoList);	     
    boolean uptime(out string startTime, out long uptimeInSeconds);
    boolean delays(out string nowTime, out DelayList dl);
    boolean reloadConf(out string message);
    
    /**
     * \brief reloadcache mark stations for reload from kvalobs.
     * 
     * If fromTime is an empty string, list all stations marked
     * for reload. If fromTime is an valid time in the past, reload
     * the cache with data from \a fromTime until current time.
     *
     * \param fromTime, from this time until current time. 
     * \param wmonolist, list all stations marked for releoad.
     * \param message, an message of the status of the opperation.
     */
    boolean reloadCache(in string fromTime, out ReloadList wmonolist, 
                        out string message);


    /** Get a bufr tah is generated.
     * \param wmoList a list of the wmonumbers we want. If the
     *                list is empty return information about all 
     *                bufrs.
     * \param fromtime the first bufr time we want a bufr for.
     * \param totime the first bufr time we want a bufr for.
     *               This may be empty if we only want bufr for
     *               one bufr time.
     * \param[out] bufrs  A list of the requested bufrs.
     * \param[out] message An error message on failure.
     * \return true on success, false otherwise.
     */
    boolean getbufr(in WmoNoList wmoList, 
		     in string fromtime, in string totime,
		     out BufrList bufrs,
		     out string message);


    /** Get the data that is used to encode a bufr.
     *
     * \param wmono The wmono we want the data for.
     * \param obstime The obstime we want data for.
     * \param[out] datalist The datalist.
     * \param[out] message An error message on failure.
     * \return true on success, false otherwise.
     */
    boolean getdata(in short wmono, 
		    in string obstime, 
		    out DataElementList datalist,
		    out string message); 
 
    };
};

#endif
